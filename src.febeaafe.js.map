{"version":3,"sources":["loader.ts","../stats.ts","config.ts","index.ts"],"names":[],"mappings":"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","file":"src.febeaafe.js","sourceRoot":"../src","sourcesContent":["import * as mapgl from '@2gis/mapgl/types';\n\nlet map: typeof mapgl | undefined;\n\nexport function load(mapglURL = 'https://mapgl.2gis.com/api/js') {\n    if (typeof window === 'undefined') {\n        throw new Error('mapgl is supported only in browser environment');\n    }\n\n    return createScriptAndLoad(mapglURL).then(() => {\n        map = (window as any).mapgl as typeof mapgl;\n        return map;\n    });\n}\n\nfunction createScriptAndLoad(mapglURL: string) {\n    return new Promise<void>((resolve, reject) => {\n        // Create script element and set attributes\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.crossOrigin = 'anonymous';\n        script.src = mapglURL;\n\n        // Append the script to the DOM\n        document.body.appendChild(script);\n\n        // Resolve the promise once the script is loaded\n        script.addEventListener('load', () => {\n            resolve();\n        });\n\n        // Catch any errors while loading the script\n        script.addEventListener('error', (error) => {\n            reject(error);\n        });\n    });\n}\n","// @ https://stackoverflow.com/questions/48719873/how-to-get-median-and-quartiles-percentiles-of-an-array-in-javascript-or-php\n\n// sort array ascending\nconst asc = arr => arr.sort((a, b) => a - b);\n\nconst sum = arr => arr.reduce((a, b) => a + b, 0);\n\nconst mean = arr => sum(arr) / arr.length;\n\n// sample standard deviation\nconst std = (arr) => {\n    const mu = mean(arr);\n    const diffArr = arr.map(a => (a - mu) ** 2);\n    return Math.sqrt(sum(diffArr) / (arr.length - 1));\n};\n\nconst quantile = (arr, q) => {\n    const sorted = asc(arr);\n    const pos = (sorted.length - 1) * q;\n    const base = Math.floor(pos);\n    const rest = pos - base;\n    if (sorted[base + 1] !== undefined) {\n        return sorted[base] + rest * (sorted[base + 1] - sorted[base]);\n    } else {\n        return sorted[base];\n    }\n};\n\nconst fmt = n => Number(n.toFixed(2))\n\nexport const stats = arr => ({\n    q25: fmt(quantile(arr, .25)),\n    median: fmt(quantile(arr, .50)),\n    q75: fmt(quantile(arr, .75)),\n    q90: fmt(quantile(arr, .90)),\n    q95: fmt(quantile(arr, .95)),\n    q99: fmt(quantile(arr, .99)),\n})","\nexport const runner = {\n    hostname: '127.0.0.1',\n    port: 3003,\n}","import { load } from './loader';\nimport { Map as JMap, TileCoords } from '@webmaps/jakarta';\nimport { stats } from '../stats';\nimport { runner } from './config';\n\nexport const runnerAddr = `http://${runner.hostname}:${runner.port}`\n\nconst ITERATIONS = 100;\n\nconst now = () => performance.now();\n\nconst log = async (msg: any) => fetch(`${runnerAddr}/log/`, {\n    method: 'POST', // or 'PUT'\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(msg),\n});\n\nconst finish = async (success: boolean) => fetch(`${runnerAddr}/exit/${success ? 'pass' : 'fail'}`);\n\n\n/*  auxData\n\n    median: \"90.65\"\n    q25: \"87.97\"\n    q75: \"98.53\"\n    q90: \"113.35\"\n    q95: \"126.10\"\n    q99: \"148.95\"\n*/\n\n/*  master\n\n    median: \"79.85\"\n    q25: \"77.10\"\n    q75: \"82.50\"\n    q90: \"85.34\"\n    q95: \"100.72\"\n    q99: \"132.40\"\n*/\n\nlet mapInstance;\n\nfunction performTest(mapUrl?: string) {\n    const generateViewPortStats = [];\n    const generateTileStats = [];\n\n    let testStarted = false;\n\n    return new Promise((resolve, reject) => {\n        if (mapInstance) {\n            mapInstance.destroy();\n        }\n        load(mapUrl).then(mapgl => {\n            const map = mapInstance = new mapgl.Map('map', {\n                key: '042b5b75-f847-4f2a-b695-b5f58adc9dfd',\n                // center: [55.268091005666506, 25.233198866057194]],         \n                // zoom: 17.5,\n                center: [82.897904, 54.98318],\n                zoom: 16\n            });\n            map.on('idle', async () => {\n                if (testStarted) {\n                    return;\n                }\n                testStarted = true;\n                const jmap = map._impl as JMap;\n                const coords = getCoords(jmap);\n                await log('Testing ' + (mapUrl || 'production'))\n                for (let i = 0; i < ITERATIONS; i++) {\n                    const start = now();\n                    await Promise.all(coords.map(coord => measureGenerateTile(jmap, coord, generateTileStats)));\n                    generateViewPortStats.push(now() - start);\n                }\n                resolve(stats(generateViewPortStats))\n                /* resolve({\n                    viewport: stats(generateViewPortStats),\n                    tile: stats(generateTileStats)\n                }) */\n            })\n        });    \n    })\n}\n\nasync function measureGenerateTile (map: JMap, coords: TileCoords, stats: number[]) {\n    const source = (map.modules.tileManager.regionalTileLayer as any).sourceCore;\n    const start = now();\n    await source.generateTile(map.state, coords, [], 2, {});\n    stats.push(now() - start);\n}\n\nfunction getCoords(map: JMap) {\n    const tileManager = map.modules.tileManager;\n    return tileManager.getViewportTiles().map(tile => tile.coords);\n}\n\n(async function start () {\n    const productionResults: any = await performTest();\n    // const targetResults: any = await performTest('https://jakarta-tiles-3588-aux-data.web-staging.2gis.ru/sdk/index.js');\n    // const targetResults: any = await performTest('https://jakarta-merge-release-mapgl-api-v1-17-0.web-staging.2gis.ru/sdk/index.js');\n    const targetResults: any = await performTest('http://localhost:8080/index.js');\n    await log('Results');\n    for (const percentile in productionResults) {\n        let delta = (targetResults[percentile] - productionResults[percentile]).toFixed(2);\n        if (delta[0] !== '-') {\n            delta = `+${delta}`\n        }\n        await log(`${percentile} ${delta} (${targetResults[percentile]}/${productionResults[percentile]})`);\n    }\n    await finish(true);\n})();"]}